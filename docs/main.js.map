{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/examples/header/header.component.ts","./src/app/examples/header/header.component.html","./src/app/examples/highlights/highlights.component.ts","./src/app/examples/highlights/highlights.component.html","./src/app/examples/login/login.component.ts","./src/app/examples/login/login.component.html","./src/app/examples/membership/membership.component.ts","./src/app/examples/membership/membership.component.html","./src/app/examples/register/register.component.ts","./src/app/examples/register/register.component.html","./src/app/formify/components/array-control/array-control.component.ts","./src/app/formify/components/array-control/array-control.component.html","./src/app/formify/components/checkbox/checkbox.component.ts","./src/app/formify/components/checkbox/checkbox.component.html","./src/app/formify/components/field-control/field-control.component.ts","./src/app/formify/components/field-control/field-control.component.html","./src/app/formify/components/formify/formify.component.ts","./src/app/formify/components/formify/formify.component.html","./src/app/formify/components/group-control/group-control.component.ts","./src/app/formify/components/group-control/group-control.component.html","./src/app/formify/components/input/input.component.ts","./src/app/formify/components/input/input.component.html","./src/app/formify/components/radio/radio.component.ts","./src/app/formify/components/radio/radio.component.html","./src/app/formify/components/select/select.component.ts","./src/app/formify/components/select/select.component.html","./src/app/formify/components/submit/submit.component.ts","./src/app/formify/components/submit/submit.component.html","./src/app/formify/components/textarea/textarea.component.ts","./src/app/formify/components/textarea/textarea.component.html","./src/app/formify/components/toggle/toggle.component.ts","./src/app/formify/components/toggle/toggle.component.html","./src/app/formify/custom/components/address/address.component.ts","./src/app/formify/custom/components/address/address.component.html","./src/app/formify/custom/components/contact/contact.component.ts","./src/app/formify/custom/components/contact/contact.component.html","./src/app/formify/custom/components/exercises/exercises.component.ts","./src/app/formify/custom/components/exercises/exercises.component.html","./src/app/formify/custom/custom.module.ts","./src/app/formify/fields/appearance.field-control.ts","./src/app/formify/fields/biography.field-control.ts","./src/app/formify/fields/color.field-control.ts","./src/app/formify/fields/country.field-control.ts","./src/app/formify/fields/email.field-control.ts","./src/app/formify/fields/index.ts","./src/app/formify/fields/language.field-control.ts","./src/app/formify/fields/name.field-control.ts","./src/app/formify/fields/password.field-control.ts","./src/app/formify/fields/phone.field-control.ts","./src/app/formify/fields/regex.ts","./src/app/formify/fields/toggle.field-control.ts","./src/app/formify/formify.module.ts","./src/app/formify/groups/address.group-control.ts","./src/app/formify/groups/contact.group-control.ts","./src/app/formify/groups/exercises.group-control.ts","./src/app/formify/groups/index.ts","./src/app/formify/material.module.ts","./src/app/formify/models/accessibility.abstract.ts","./src/app/formify/models/array.model.ts","./src/app/formify/models/error-mathers.config.ts","./src/app/formify/models/field.model.ts","./src/app/formify/models/formify-builder.model.ts","./src/app/formify/models/formify.generate.ts","./src/app/formify/models/formify.model.ts","./src/app/formify/models/group.model.ts","./src/app/formify/models/index.ts","./src/app/formify/models/option.model.ts","./src/app/formify/models/submit.model.ts","./src/app/formify/models/validator.model.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport {MembershipComponent} from './examples/membership/membership.component';\r\nimport {RegisterComponent} from './examples/register/register.component';\r\nimport {LoginComponent} from './examples/login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {path: 'membership', component: MembershipComponent},\r\n  {path: 'register', component: RegisterComponent},\r\n  {path: 'login', component: LoginComponent},\r\n  {path: '', redirectTo: 'membership', pathMatch: 'full'}\r\n  ];\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {Component} from '@angular/core';\r\nimport {zoomIn} from 'ngxa';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n  animations: [\r\n    zoomIn({direction: 'Left', timings: '1000ms'}),\r\n  ]\r\n})\r\nexport class AppComponent {\r\n  title = 'formify';\r\n  constructor() {}\r\n}\r\n","<div class=\"content\" role=\"main\">\r\n  <!-- Highlight Card -->\r\n  <div class=\"card highlight-card card-small angular-formify\">\r\n    <svg [@zoomInLeft] id=\"rocket\" alt=\"Rocket Ship\" xmlns=\"http://www.w3.org/2000/svg\" width=\"101.678\" height=\"101.678\" viewBox=\"0 0 101.678 101.678\">\r\n      <g id=\"Group_83\" data-name=\"Group 83\" transform=\"translate(-141 -696)\">\r\n        <circle id=\"Ellipse_8\" data-name=\"Ellipse 8\" cx=\"50.839\" cy=\"50.839\" r=\"50.839\" transform=\"translate(141 696)\" fill=\"#673ab7\"/>\r\n        <g id=\"Group_47\" data-name=\"Group 47\" transform=\"translate(165.185 720.185)\">\r\n          <path id=\"Path_33\" data-name=\"Path 33\" d=\"M3.4,42.615a3.084,3.084,0,0,0,3.553,3.553,21.419,21.419,0,0,0,12.215-6.107L9.511,30.4A21.419,21.419,0,0,0,3.4,42.615Z\" transform=\"translate(0.371 3.363)\" fill=\"#fff\"/>\r\n          <path id=\"Path_34\" data-name=\"Path 34\" d=\"M53.3,3.221A3.09,3.09,0,0,0,50.081,0,48.227,48.227,0,0,0,18.322,13.437c-6-1.666-14.991-1.221-18.322,7.218A33.892,33.892,0,0,1,9.439,25.1l-.333.666a3.013,3.013,0,0,0,.555,3.553L23.985,43.641a2.9,2.9,0,0,0,3.553.555l.666-.333A33.892,33.892,0,0,1,32.647,53.3c8.55-3.664,8.884-12.326,7.218-18.322A48.227,48.227,0,0,0,53.3,3.221ZM34.424,9.772a6.439,6.439,0,1,1,9.106,9.106,6.368,6.368,0,0,1-9.106,0A6.467,6.467,0,0,1,34.424,9.772Z\" transform=\"translate(0 0.005)\" fill=\"#fff\"/>\r\n        </g>\r\n      </g>\r\n    </svg>\r\n    <span >Angular Formify</span>\r\n  </div>\r\n  <!-- Resources -->\r\n  <div class=\"title\">\r\n    <h2>Angular library to generate forms dynamically by having the ability to customize, manipulate and scale it easy</h2>\r\n  </div>\r\n  <div class=\"card-container\">\r\n    <a class=\"card\" rel=\"noopener\" href=\"javascript:\" routerLink=\"/membership\">\r\n      <span>Membership formify</span>\r\n      <svg class=\"material-icons\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>    </a>\r\n    <a class=\"card\" rel=\"noopener\" href=\"javascript:\" routerLink=\"/register\">\r\n      <span>Register formify</span>\r\n      <svg class=\"material-icons\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>\r\n    </a>\r\n    <a class=\"card\" rel=\"noopener\" href=\"javascript:\" routerLink=\"/login\">\r\n      <span>Login formify</span>\r\n      <svg class=\"material-icons\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>\r\n    </a>\r\n    <div class=\"form\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Next Steps -->\r\n  <input type=\"hidden\" #selection>\r\n  <!-- Terminal -->\r\n  <div class=\"card-container\">\r\n  </div>\r\n  <!-- Links -->\r\n  <div class=\"card-container\">\r\n  </div>\r\n  <!-- Footer -->\r\n  <footer style=\"padding: 10px 0\">\r\n    <div class=\"footer\">\r\n      <div class=\"section\">\r\n        <a href=\"https://github.com/klodianshaba/angular-formify\" target=\"_blank\" >\r\n          <img alt=\"GitHub Logo\" src=\"./assets/images/GitHub-Mark-32px.png\">\r\n        </a>\r\n        <a href=\"https://www.linkedin.com/in/klodian-shaba-536269153/\" target=\"_blank\" >\r\n          <img alt=\"GitHub Logo\" src=\"./assets/images/In-Blue-Logo.png.original.png\">\r\n        </a>\r\n      </div>\r\n      <div class=\"section\">\r\n        <span class=\"fw-bold fs-5 copyright\">&copy; Klodian Shaba</span>\r\n      </div>\r\n    </div>\r\n  </footer>\r\n  <svg id=\"clouds\" alt=\"Gray Clouds Background\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2611.084\" height=\"485.677\" viewBox=\"0 0 2611.084 485.677\">\r\n    <path id=\"Path_39\" data-name=\"Path 39\" d=\"M2379.709,863.793c10-93-77-171-168-149-52-114-225-105-264,15-75,3-140,59-152,133-30,2.83-66.725,9.829-93.5,26.25-26.771-16.421-63.5-23.42-93.5-26.25-12-74-77-130-152-133-39-120-212-129-264-15-54.084-13.075-106.753,9.173-138.488,48.9-31.734-39.726-84.4-61.974-138.487-48.9-52-114-225-105-264,15a162.027,162.027,0,0,0-103.147,43.044c-30.633-45.365-87.1-72.091-145.206-58.044-52-114-225-105-264,15-75,3-140,59-152,133-53,5-127,23-130,83-2,42,35,72,70,86,49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33,61.112,8.015,113.854-5.72,150.492-29.764a165.62,165.62,0,0,0,110.861-3.236c47,94,178,113,251,33,31.385,4.116,60.563,2.495,86.487-3.311,25.924,5.806,55.1,7.427,86.488,3.311,73,80,204,61,251-33a165.625,165.625,0,0,0,120,0c51,13,108,15,157-5a147.188,147.188,0,0,0,33.5-18.694,147.217,147.217,0,0,0,33.5,18.694c49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33C2446.709,1093.793,2554.709,922.793,2379.709,863.793Z\" transform=\"translate(142.69 -634.312)\" fill=\"#673ab7\"/>\r\n  </svg>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FormifyModule } from './formify/formify.module';\r\nimport {CustomModule} from './formify/custom/custom.module';\r\nimport {MaterialModule} from './formify/material.module';\r\nimport { NgxJsonViewerModule } from 'ngx-json-viewer';\r\nimport { HighlightModule, HIGHLIGHT_OPTIONS } from 'ngx-highlightjs';\r\nimport {MembershipComponent} from './examples/membership/membership.component';\r\nimport { RegisterComponent } from './examples/register/register.component';\r\nimport { LoginComponent } from './examples/login/login.component';\r\nimport { HighlightsComponent } from './examples/highlights/highlights.component';\nimport { HeaderComponent } from './examples/header/header.component';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MembershipComponent,\r\n    RegisterComponent,\r\n    LoginComponent,\r\n    HighlightsComponent,\r\n    HeaderComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    FormifyModule,\r\n    CustomModule,\r\n    MaterialModule,\r\n    NgxJsonViewerModule,\r\n    HighlightModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HIGHLIGHT_OPTIONS,\r\n      useValue: {\r\n        fullLibraryLoader: () => import('highlight.js'),\r\n      }\r\n    }\r\n  ],\r\n\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import {Component, EventEmitter, OnInit, Output, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'formify-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  @Output('toggleCollapse') toggleCollapse: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Input('label') label: string = 'Membershqip Formify';\r\n  public collapse: boolean = true;\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n  }\r\n  onToggleCollapse(): void{\r\n    this.collapse = !this.collapse;\r\n    this.toggleCollapse.emit(this.collapse);\r\n  }\r\n\r\n}\r\n","<div class=\"form-header\">\r\n  <a mat-icon-button target=\"_blank\" href=\"https://github.com/klodianshaba/angular-formify\">\r\n    <svg id=\"github-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" focusable=\"false\" width=\"1em\" height=\"1em\" style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\">\r\n      <path d=\"M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33c.85 0 1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2z\" fill=\"black\"/>\r\n    </svg>\r\n  </a>\r\n  <span class=\"label\">{{label}}</span>\r\n  <button mat-icon-button (click)=\"onToggleCollapse()\"> <mat-icon>code</mat-icon></button>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nexport enum Highlights {\r\n  membership = 'membership',\r\n  register = 'register',\r\n  login = 'login'\r\n}\r\nexport type HighlightType = Highlights.membership | Highlights.register | Highlights.login;\r\nexport class HighlightState {\r\n  type: HighlightType;\r\n  items: {\r\n    label: string;\r\n    language: string;\r\n    code: string;\r\n  }[];\r\n}\r\n@Component({\r\n  selector: 'formify-highlights',\r\n  templateUrl: './highlights.component.html',\r\n  styleUrls: ['./highlights.component.scss']\r\n})\r\nexport class HighlightsComponent implements OnInit {\r\n  @Input('highlightType') set onHighlight(highlightType: HighlightType){\r\n    this.highlightType = highlightType;\r\n    this.initCurrentHighlight();\r\n  }\r\n  @Input() collapse: boolean = true;\r\n  @Input() json: object = {};\r\n  public highlight: HighlightState;\r\n  public highlightType: HighlightType =  Highlights.membership;\r\n  public highlights: HighlightState[] = [\r\n    {\r\n      type: Highlights.membership,\r\n      items: [\r\n        {\r\n        label: 'HTML',\r\n        language: 'html',\r\n        code: `<form class=\"formify\" [formGroup]=\"formify.formGroup\" #form=\"ngForm\" (ngSubmit)=\"onSubmit()\">\r\n  <formify-input formControlName=\"firstName\" [fieldModel]=\"formify.field('firstName')\"></formify-input>\r\n  <formify-input formControlName=\"lastName\" [fieldModel]=\"formify.field('lastName')\"></formify-input>\r\n  <formify-select formControlName=\"languages\" [fieldModel]=\"formify.field('languages')\"></formify-select>\r\n  <formify-textarea formControlName=\"biography\" [fieldModel]=\"formify.field('biography')\"></formify-textarea>\r\n  <formify-toggle formControlName=\"toggleColor\" [fieldModel]=\"formify.field('toggleColor')\"></formify-toggle>\r\n  <formify-radio formControlName=\"color\" [fieldModel]=\"formify.field('color')\"></formify-radio>\r\n  <formify-exercises [groupModel]=\"formify.group('exercises')\"></formify-exercises>\r\n  <formify-radio formControlName=\"appearance\" [fieldModel]=\"formify.field('appearance')\"></formify-radio>\r\n  <formify-address [arrayModel]=\"formify.array('address')\"></formify-address>\r\n  <formify-toggle formControlName=\"toggleContact\" [fieldModel]=\"formify.field('toggleContact')\"></formify-toggle>\r\n  <formify-contact [groupModel]=\"formify.group('contact')\"></formify-contact>\r\n  <formify-submit [submit]=\"formify.submit\"></formify-submit>\r\n</form>`\r\n        },\r\n        {\r\n          label: 'TS',\r\n          language: 'ts',\r\n          code: `export class MembershipComponent implements OnInit, OnDestroy {\r\n  public formify: FormifyModel = new FormifyModel({\r\n    controls: [\r\n      new NameFieldControl({}), // extends FieldModel\r\n      new FieldModel({controlName: 'lastName', label: 'Enter last name', placeholder: 'last name'}),\r\n      new LanguageFieldControl({}), // extends FieldModel\r\n      new BiographyFieldControl({}), // extends FieldModel\r\n      new ColorFieldControl({}), // extends FieldModel\r\n      new AppearanceFieldControl(),\r\n      new ToggleFieldControl({controlName: 'toggleColor', label: 'Show/Hidden choose color radios'}), // extends FieldModel\r\n      new ArrayModel({controlName: 'address', label: 'Address:', controls: [\r\n          new AddressGroupControl(), // extends GroupModel\r\n        ]}),\r\n      new ExercisesGroupControl(), // extends GroupModel\r\n      new ToggleFieldControl({controlName: 'toggleContact', label: 'Add/Remove fill contact group'}), // extends FieldModel\r\n      new ContactGroupControl(),\r\n    ],\r\n    submit: {text: 'Save Membership'},\r\n  });\r\n  constructor() {\r\n     this.formify.formGroup.get('color').valueChanges.subscribe(color => { // handle color change\r\n      this.formify.updateFields({color});\r\n      this.formify.updateSubmit({color});\r\n    });\r\n    this.formify.formGroup.get('appearance').valueChanges.subscribe(appearance => { // handle appearance change\r\n      this.formify.updateFields({appearance});\r\n    });\r\n    this.formify.formGroup.get('toggleColor').valueChanges.subscribe(toggle => { // handle show/hide color radios\r\n      if (toggle){\r\n        this.formify.field('color').update({hidden: false });\r\n      }else{\r\n        this.formify.field('color').update({hidden: true });\r\n      }\r\n    });\r\n    this.formify.formGroup.get('toggleContact').valueChanges.subscribe(contact => { // handle add/remove contact group\r\n      if (contact){\r\n        this.formify.addControl( new ContactGroupControl());\r\n      }else{\r\n        this.formify.removeControl('contact');\r\n      }\r\n    });\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.formify.unSubscribe();\r\n  }\r\n}`\r\n        },\r\n      ]\r\n    },\r\n    {\r\n      type: Highlights.register,\r\n      items: [{\r\n        label: 'HTML',\r\n        language: 'html',\r\n        code: ` <formify [formify]=\"formify\" (submit)=\"onSubmit()\"></formify>`\r\n      },\r\n        {\r\n          label: 'TS',\r\n          language: 'ts',\r\n          code: `public formify = new FormifyModel({\r\n    controls: [\r\n      new NameFieldControl({ controlName: 'fullName' , label: 'Enter your full name'}), // extends FieldModel and overwrite\r\n      new EmailFieldControl(),\r\n      new ToggleFieldControl({ // extends FieldModel, overwrite by given optional FieldState\r\n        fieldType: FieldTypes.radio, label: 'Account Type', defaultValue: 'visitor',\r\n        controlName: 'accountType', options: [ {text: 'Business', value: 'business'},  {text: 'Visitor', value: 'visitor'}]\r\n      }),\r\n      new LanguageFieldControl(), // extends FieldModel\r\n      new PasswordFieldControl(), // extends FieldModel\r\n      new FieldModel({ // FieldModel\r\n        controlName: 'confirmPassword', icon: 'check', type: 'password', label: 'Confirm password', placeholder: 'password',\r\n        validators: [\r\n          new ValidatorModel( {validator: Validators.required , errorCode: 'required', description: 'Confirm password is required'} ),\r\n          new ValidatorModel( {validator: Validators.minLength(8), errorCode: 'minlength', description: 'Confirm password must have 8 characters'}),\r\n          {validator: null, errorCode: 'notMatch', description: 'Confirm password not match'},\r\n        ]\r\n      }),\r\n    ],\r\n    submit: {text: 'Register' , color: 'warn'}, // submit button\r\n    options: MatchConfirmPassword  // options: ValidatorFn | ValidatorFn[] | AbstractControlOptions\r\n });`\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      type: Highlights.login,\r\n      items: [\r\n        {\r\n          label: 'HTML',\r\n          language: 'html',\r\n          code: ` <formify [formify]=\"formify\" (submit)=\"onSubmit()\"></formify>`\r\n        },\r\n        {\r\n          label: 'TS',\r\n          language: 'ts',\r\n          code: `public formify = new FormifyModel({\r\n    controls: [\r\n      new EmailFieldControl(), // extends FieldModel\r\n      new PasswordFieldControl(), // extends FieldModel\r\n    ],\r\n    submit: {text: 'Login'}\r\n});`\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n  public initCurrentHighlight(): void{\r\n    this.highlight = this.highlights.find(highlight => highlight.type === this.highlightType);\r\n  }\r\n  constructor() {}\r\n  ngOnInit(): void {\r\n    this.initCurrentHighlight();\r\n  }\r\n}\r\n","<div class=\"code-content\" *ngIf=\"!collapse\">\r\n  <mat-tab-group mat-align-tabs=\"start\">\r\n    <mat-tab *ngFor=\"let highlight of highlight.items\" [label]=\"highlight.label\">\r\n      <pre><code [highlight]=\"highlight.code\"></code></pre>\r\n    </mat-tab>\r\n    <mat-tab label=\"JSON\">\r\n      <ngx-json-viewer [json]=\"json\" [expanded]=\"false\"></ngx-json-viewer>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {FieldModel, FieldTypes, FormifyModel, ValidatorModel} from '../../formify/models';\r\nimport {EmailFieldControl, LanguageFieldControl, NameFieldControl, PasswordFieldControl, ToggleFieldControl} from '../../formify/fields';\r\nimport {Validators} from '@angular/forms';\r\nimport {MatchConfirmPassword} from '../../formify/models/error-mathers.config';\r\nimport { Highlights } from '../highlights/highlights.component';\r\n\r\n@Component({\r\n  selector: 'formify-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit  {\r\n  public collapse: boolean = true;\r\n  public Highlights = Highlights;\r\n  public formify = new FormifyModel({\r\n    controls: [\r\n      new EmailFieldControl(), // extends FieldModel\r\n      new PasswordFieldControl(), // extends FieldModel\r\n    ],\r\n    submit: {text: 'Login'}, // submit button\r\n  });\r\n  constructor() {}\r\n  ngOnInit(): void {\r\n  }\r\n  onSubmit(): void{\r\n    this.formify.loading(true);\r\n    setTimeout(() => {\r\n      this.formify.loading(false);\r\n    }, 1000);\r\n  }\r\n  onToggleCollapse(): void{\r\n    this.collapse = !this.collapse;\r\n  }\r\n\r\n}\r\n","<div class=\"register-content\">\r\n  <formify-header style=\"width: 100%\" label=\"Login formify\" (toggleCollapse)=\"collapse = $event\"></formify-header>\r\n  <formify-highlights [highlightType]=\"Highlights.login\" [collapse]=\"collapse\" [json]=\"formify.formGroup.value\"></formify-highlights>\r\n  <div class=\"form-content\">\r\n    <formify [formify]=\"formify\" (submit)=\"onSubmit()\"></formify>\r\n  </div>\r\n</div>\r\n","import {ChangeDetectorRef, Component, OnInit , OnDestroy} from '@angular/core';\r\nimport {ArrayModel, FieldModel, FormifyModel} from '../../formify/models';\r\nimport {\r\n  AppearanceFieldControl,\r\n  BiographyFieldControl,\r\n  ColorFieldControl,\r\n  LanguageFieldControl,\r\n  NameFieldControl,\r\n  ToggleFieldControl\r\n} from '../../formify/fields';\r\nimport {AddressGroupControl, ContactGroupControl, ExercisesGroupControl} from '../../formify/groups';\r\n@Component({\r\n  selector: 'formify-membership',\r\n  templateUrl: './membership.component.html',\r\n  styleUrls: ['./membership.component.scss']\r\n})\r\nexport class MembershipComponent implements OnInit , OnDestroy {\r\n  public collapse: boolean = true;\r\n  public formify: FormifyModel = new FormifyModel({\r\n    controls: [\r\n      new NameFieldControl({}), // extends FieldModel\r\n      new FieldModel({controlName: 'lastName', label: 'Enter last name', placeholder: 'last name'}),\r\n      new LanguageFieldControl({}), // extends FieldModel\r\n      new BiographyFieldControl({}), // extends FieldModel\r\n      new ColorFieldControl({}), // extends FieldModel\r\n      new AppearanceFieldControl({}),\r\n      new ToggleFieldControl({controlName: 'toggleColor', label: 'Show/Hidden choose color radios'}), // extends FieldModel\r\n      new ArrayModel({controlName: 'address', label: 'Address:', controls: [ // extends ArrayModel\r\n          new AddressGroupControl({}), // extends GroupModel\r\n        ]}),\r\n      new ExercisesGroupControl({}), // extends GroupModel\r\n      new ToggleFieldControl({controlName: 'toggleContact', label: 'Add/Remove fill contact group'}), // extends FieldModel\r\n      new ContactGroupControl({}),\r\n    ],\r\n    submit: {text: 'Save Membership'},\r\n  });\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    this.formify.formGroup.get('color').valueChanges.subscribe(color => { // handle color change\r\n      this.formify.updateFields({color});\r\n      this.formify.updateSubmit({color});\r\n    });\r\n    this.formify.formGroup.get('appearance').valueChanges.subscribe(appearance => { // handle appearance change\r\n      this.formify.updateFields({appearance});\r\n    });\r\n    this.formify.formGroup.get('toggleColor').valueChanges.subscribe(toggle => { // handle show/hide color radios\r\n      if (toggle){\r\n        this.formify.field('color').update({hidden: false });\r\n      }else{\r\n        this.formify.field('color').update({hidden: true });\r\n      }\r\n    });\r\n    this.formify.formGroup.get('toggleContact').valueChanges.subscribe(contact => { // handle add/remove contact group\r\n      if (contact){\r\n        this.formify.addControl( new ContactGroupControl());\r\n      }else{\r\n        this.formify.removeControl('contact');\r\n      }\r\n      this.cd.detectChanges();\r\n    });\r\n  }\r\n  ngOnInit(): void {\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.formify.unSubscribe();\r\n  }\r\n  onSubmit(): void{\r\n    this.formify.loading(true);\r\n    setTimeout(() => {\r\n      this.formify.loading(false);\r\n    }, 1000);\r\n  }\r\n  onToggleCollapse(): void{\r\n    this.collapse = !this.collapse;\r\n  }\r\n}\r\n","<div class=\"form-content\">\r\n  <formify-header style=\"width: 100%\" label=\"Membership Formify\" (toggleCollapse)=\"collapse = $event\"></formify-header>\r\n  <formify-highlights [collapse]=\"collapse\" [json]=\"formify.formGroup.value\"></formify-highlights>\r\n  <form [formGroup]=\"formify.formGroup\" #form=\"ngForm\" (ngSubmit)=\"onSubmit()\" [ngClass]=\"{'loading-form': formify.submit.loading}\">\r\n    <div class=\"full-name\">\r\n      <formify-input formControlName=\"firstName\" [fieldModel]=\"formify.field('firstName')\"></formify-input>\r\n      <formify-input formControlName=\"lastName\" [fieldModel]=\"formify.field('lastName')\"></formify-input>\r\n    </div>\r\n    <formify-select formControlName=\"languages\" [fieldModel]=\"formify.field('languages')\"></formify-select>\r\n    <formify-textarea formControlName=\"biography\" [fieldModel]=\"formify.field('biography')\"></formify-textarea>\r\n    <formify-toggle formControlName=\"toggleColor\" [fieldModel]=\"formify.field('toggleColor')\"></formify-toggle>\r\n    <formify-radio formControlName=\"color\" [fieldModel]=\"formify.field('color')\"></formify-radio>\r\n    <formify-exercises [groupModel]=\"formify.group('exercises')\"></formify-exercises>\r\n    <formify-radio formControlName=\"appearance\" [fieldModel]=\"formify.field('appearance')\"></formify-radio>\r\n    <formify-address [arrayModel]=\"formify.array('address')\"></formify-address>\r\n    <formify-toggle formControlName=\"toggleContact\" [fieldModel]=\"formify.field('toggleContact')\"></formify-toggle>\r\n    <formify-contact [groupModel]=\"formify.group('contact')\"></formify-contact>\r\n    <formify-submit [submit]=\"formify.submit\"></formify-submit>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {FieldModel, FieldTypes, FormifyModel, ValidatorModel} from '../../formify/models';\r\nimport {EmailFieldControl, LanguageFieldControl, NameFieldControl, PasswordFieldControl, ToggleFieldControl} from '../../formify/fields';\r\nimport {MatchConfirmPassword} from '../../formify/models/error-mathers.config';\r\nimport {Validators} from '@angular/forms';\r\nimport {Highlights} from '../highlights/highlights.component';\r\n\r\n@Component({\r\n  selector: 'formify-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public collapse: boolean = true;\r\n  public Highlights = Highlights;\r\n  public formify = new FormifyModel({\r\n    controls: [\r\n      new NameFieldControl({ controlName: 'fullName' , label: 'Enter your full name'}), // extends FieldModel and overwrite\r\n      new EmailFieldControl(),\r\n      new ToggleFieldControl({ // extends FieldModel, overwrite by given optional FieldState\r\n        fieldType: FieldTypes.radio, label: 'Account Type', defaultValue: 'visitor',\r\n        controlName: 'accountType', options: [ {text: 'Business', value: 'business'},  {text: 'Visitor', value: 'visitor'}]\r\n      }),\r\n      new LanguageFieldControl(), // extends FieldModel\r\n      new PasswordFieldControl(), // extends FieldModel\r\n      new FieldModel({ // FieldModel\r\n        controlName: 'confirmPassword', icon: 'check', type: 'password', label: 'Confirm password', placeholder: 'password',\r\n        validators: [\r\n          new ValidatorModel( {validator: Validators.required , errorCode: 'required', description: 'Confirm password is required'} ),\r\n          new ValidatorModel( {validator: Validators.minLength(8), errorCode: 'minlength', description: 'Confirm password must have 8 characters'}),\r\n          {validator: null, errorCode: 'notMatch', description: 'Confirm password not match'},\r\n        ]\r\n      }),\r\n    ],\r\n    submit: {text: 'Register'}, // submit button\r\n    options: MatchConfirmPassword  // options: ValidatorFn | ValidatorFn[] | AbstractControlOptions\r\n  });\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void{\r\n    this.formify.loading(true);\r\n    setTimeout(() => {\r\n      this.formify.loading(false);\r\n    }, 1000);\r\n  }\r\n  onToggleCollapse(): void{\r\n    this.collapse = !this.collapse;\r\n  }\r\n\r\n}\r\n","<div class=\"register-content\">\r\n  <formify-header style=\"width: 100%\" label=\"Register formify\" (toggleCollapse)=\"collapse = $event\"></formify-header>\r\n  <formify-highlights [highlightType]=\"Highlights.register\" [collapse]=\"collapse\" [json]=\"formify.formGroup.value\"></formify-highlights>\r\n  <div class=\"form-content\" >\r\n    <formify [formify]=\"formify\" (submit)=\"onSubmit()\"></formify>\r\n  </div>\r\n</div>\r\n","import {Component, OnInit, SimpleChanges, OnChanges, Input, OnDestroy} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ArrayModel} from '../../models';\r\n@Component({\r\n  selector: 'formify-array',\r\n  templateUrl: './array-control.component.html',\r\n  styleUrls: ['./array-control.component.scss']\r\n})\r\nexport class ArrayControlComponent implements OnInit, OnChanges, OnDestroy {\r\n  private _arrayModel: ArrayModel = new ArrayModel({controlName: '', controls: []});\r\n  @Input('arrayModel') set onArrayConfig( arrayModel: ArrayModel) {\r\n    this._arrayModel = arrayModel;\r\n    if (arrayModel) {\r\n      this.formGroup = new FormGroup({[this.arrayModel.controlName]: this.arrayModel.formArray});\r\n      this.formGroup.statusChanges.subscribe(status => {\r\n        this.arrayModel.change.next(this.formGroup.value);\r\n      });\r\n    }\r\n  }\r\n  formGroup: FormGroup;\r\n  get arrayModel(): ArrayModel{\r\n    return this._arrayModel;\r\n  }\r\n  constructor() { }\r\n  ngOnChanges(changes: SimpleChanges): void {}\r\n  ngOnInit(): void {}\r\n  ngOnDestroy(): void {\r\n    if (this.arrayModel){\r\n      this.arrayModel.change.complete();\r\n    }\r\n  }\r\n}\r\n","\r\n<form [formGroup]=\"formGroup\" #form=\"ngForm\" *ngIf=\"arrayModel\">\r\n  <ng-content></ng-content>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import {Component, forwardRef, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport {FieldControlComponent} from '../field-control/field-control.component';\r\nimport {FormBuilder, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n@Component({\r\n  selector: 'formify-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent) , multi: true }]\r\n})\r\nexport class CheckboxComponent extends FieldControlComponent implements OnInit , OnChanges {\r\n  constructor(protected formBuilder: FormBuilder) { super(formBuilder); }\r\n  ngOnChanges(changes: SimpleChanges): void {super.ngOnChanges(changes); }\r\n  ngOnInit(): void { super.ngOnInit(); }\r\n}\r\n","\r\n<form [formGroup]=\"formGroup\" #form=\"ngForm\" [autocomplete]=\"autoComplete\" *ngIf=\"fieldModel && !hidden\">\r\n  <mat-checkbox class=\"checkbox\" [formControlName]=\"controlName\" [color]=\"color\" (change)=\"emitValue()\">\r\n    <mat-label>{{(!useTranslation) ? label : label | translate}}</mat-label>\r\n  </mat-checkbox>\r\n  <mat-icon *ngIf=\"icon\" matSuffix [ngClass]=\"{'error-icon' : control.invalid && submitted | async }\">{{icon}}</mat-icon>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import {Component, ElementRef, EventEmitter, forwardRef, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild, AfterViewInit, OnDestroy} from '@angular/core';\r\nimport {FieldModel, ValidatorModel, ControlTypes, OptionModel, ValidatorState} from '../../models';\r\nimport {AbstractControl, ControlValueAccessor, FormBuilder, FormControl, FormGroup, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {ErrorStateMatcher, ThemePalette} from '@angular/material/core';\r\nimport {MatFormFieldAppearance} from '@angular/material/form-field';\r\nimport {BehaviorSubject, Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n@Component({\r\n  selector: 'formify-field',\r\n  templateUrl: './field-control.component.html',\r\n  styleUrls: ['./field-control.component.scss']\r\n})\r\nexport class FieldControlComponent implements ControlValueAccessor, OnInit , OnChanges, AfterViewInit, OnDestroy {\r\n  private _fieldModel: FieldModel = new FieldModel({controlName: null});\r\n  @Input('fieldModel') set noFieldConfig( fieldModel: FieldModel | any) {this._fieldModel = fieldModel; }\r\n  @Output('onPrefix') onPrefix: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  constructor(protected formBuilder: FormBuilder) {}\r\n  @ViewChild('submit', {static: false}) submit: ElementRef;\r\n  onChange: any;\r\n  formGroup: FormGroup;\r\n  private $unSubscribe: Subject<boolean> = new Subject<boolean>();\r\n  writeValue(obj: any): void {\r\n    this.formGroup.controls[this.controlName].setValue(obj, { emitEvent: false });\r\n  }\r\n  registerOnChange(fn: any): void { this.onChange = fn; }\r\n  registerOnTouched(fn: any): void {}\r\n  setDisabledState?(isDisabled: boolean): void { }\r\n  emitValue(): void {\r\n    if (this.onChange) { this.onChange(this.formGroup.controls[this.controlName].value); }\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void { }\r\n  ngOnInit(): void {\r\n    this.formGroup = this.formBuilder.group({\r\n      [this.controlName]: new FormControl(null, this.validators.map(validator => validator.validator).filter(validator => validator)),\r\n    });\r\n    (this.readOnly) ? this.formGroup.disable() : this.formGroup.enable();\r\n    this.formControl.statusChanges.pipe(takeUntil(this.$unSubscribe)).subscribe(status => {\r\n      if (status === 'INVALID') { this.checkCustomErrors(this.control); }\r\n    });\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.submitted.pipe(takeUntil(this.$unSubscribe)).subscribe(status => {\r\n      if (status) { this.submit.nativeElement.click(); }\r\n    });\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.$unSubscribe.next();\r\n    this.$unSubscribe.complete();\r\n  }\r\n  handlePrefix(event: Event): void { this.onPrefix.emit(true); }\r\n  get control(): AbstractControl { return this.formGroup.get(this.controlName); }\r\n  get fieldModel(): FieldModel {return this._fieldModel; }\r\n  get formControl(): FormControl {return this.fieldModel.formControl; }\r\n  get autoComplete(): 'off' | 'on' {return  this.fieldModel.autoComplete; }\r\n  get submitted(): BehaviorSubject<boolean> {return this.fieldModel.submit.status; }\r\n  get errorStateMatcher(): ErrorStateMatcher {return this.fieldModel.errorStateMatcher; }\r\n  get validators(): ValidatorState[] {return this.fieldModel.validators; }\r\n  get options(): OptionModel[] {return this.fieldModel.options; }\r\n  get controlType(): ControlTypes {return this.fieldModel.controlType; }\r\n  get controlName(): string {return this.fieldModel.controlName; }\r\n  get useTranslation(): boolean {return this.fieldModel.useTranslation; }\r\n  get icon(): string {return this.fieldModel.icon; }\r\n  get label(): string {return this.fieldModel.label; }\r\n  get placeholder(): string {return this.fieldModel.placeholder; }\r\n  get hint(): string {return this.fieldModel.hint; }\r\n  get appearance(): MatFormFieldAppearance {return this.fieldModel.appearance; }\r\n  get type(): string {return this.fieldModel.type; }\r\n  get none(): boolean {return this.fieldModel.none; }\r\n  get multiple(): boolean {return this.fieldModel.multiple; }\r\n  get prefix(): string {return  this.fieldModel.prefix;}\r\n  get dropDownInPrefix(): boolean {return this.fieldModel.dropDownInPrefix; }\r\n  get readOnly(): boolean {return  this.fieldModel.readOnly; }\r\n  get color(): ThemePalette {return  this.fieldModel.color; }\r\n  get hidden(): boolean {return  this.fieldModel.hidden; }\r\n  get disabled(): boolean {return  this.fieldModel.disabled; }\r\n  public errors(control: AbstractControl): ValidatorState[] {\r\n    const firstError: ValidatorState[] = [];\r\n    if (control.invalid) {\r\n      for (const validator of this.validators) {\r\n        if (control.hasError(validator.errorCode)) {\r\n          firstError.push(validator);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return firstError;\r\n  }\r\n  public checkCustomErrors(control: AbstractControl): void {\r\n    if (this.formControl.errors) {\r\n      Object.entries( this.formControl.errors).map(([name, value]) => ({name , value})).forEach( error => {\r\n        this.validators.filter(item => !item.validator).forEach(validator => {\r\n          if (validator.errorCode === error.name ) {\r\n            control.setErrors({ [error.name]: true });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n","\r\n<form [formGroup]=\"formGroup\" #form=\"ngForm\" *ngIf=\"fieldModel && !hidden\">\r\n  <ng-content></ng-content>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import {Component, Input, OnChanges, OnInit, SimpleChanges, Output, EventEmitter, ViewChild, ElementRef} from '@angular/core';\r\nimport {FieldModel, ArrayModel, FormifyModel, GroupModel, SubmitModel, FieldTypes, ControlTypes} from '../../models';\r\nimport {FormArray, FormGroup, Validators} from '@angular/forms';\r\nimport { MatButton } from '@angular/material/button';\r\n@Component({\r\n  selector: 'formify',\r\n  templateUrl: './formify.component.html',\r\n  styleUrls: ['./formify.component.scss']\r\n})\r\nexport class FormifyComponent implements OnInit , OnChanges {\r\n  @Input('formify') set onForm(formify: FormifyModel) {this.formify = formify; }\r\n  @Output('onPrefix') onPrefix: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @ViewChild('submitButton', {static: false}) submitButton: MatButton;\r\n  public formify: FormifyModel;\r\n  public fieldTypes = FieldTypes;\r\n  public controlTypes = ControlTypes;\r\n  get formGroup(): FormGroup {\r\n    return this.formify.formGroup;\r\n  }\r\n  get controls(): (FieldModel | GroupModel | ArrayModel)[] {\r\n    return this.formify.controls;\r\n  }\r\n  get loading(): boolean {\r\n    return this.formify.submit.loading;\r\n  }\r\n  get submit(): SubmitModel {\r\n    return this.formify.submit;\r\n  }\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {}\r\n\r\n  onSubmit(): void {}\r\n\r\n  onKeyPressAddContactForm(event: KeyboardEvent): void {\r\n    if ( event.keyCode === 13) {\r\n      this.submitButton._elementRef.nativeElement.click();\r\n    }\r\n  }\r\n  handlePrefix(event: boolean): void {\r\n    this.onPrefix.emit(event);\r\n  }\r\n}\r\n","\r\n<form [formGroup]=\"formGroup\" #ngForm=\"ngForm\" (ngSubmit)=\"onSubmit()\" (keypress)=\"onKeyPressAddContactForm($event)\" [ngClass]=\"{'loading-form':loading}\">\r\n  <ng-template #recursiveList let-list=\"controls\">\r\n      <span *ngFor=\"let control of list\" [ngSwitch]=\"control.controlType\">\r\n        <ng-container *ngSwitchCase=\"controlTypes.formField\">\r\n          <formify-input *ngIf=\"control.fieldType === fieldTypes.input \" [formControl]=\"control.formControl\" [fieldModel]=\"control\" (onPrefix)=\"handlePrefix($event)\"></formify-input>\r\n          <formify-select *ngIf=\"control.fieldType === fieldTypes.select\" [formControl]=\"control.formControl\" [fieldModel]=\"control\"></formify-select>\r\n          <formify-radio *ngIf=\"control.fieldType === fieldTypes.radio\" [formControl]=\"control.formControl\" [fieldModel]=\"control\"></formify-radio>\r\n          <formify-checkbox *ngIf=\"control.fieldType === fieldTypes.checkbox\" [formControl]=\"control.formControl\" [fieldModel]=\"control\"></formify-checkbox>\r\n          <formify-textarea *ngIf=\"control.fieldType === fieldTypes.textarea\" [formControl]=\"control.formControl\" [fieldModel]=\"control\"></formify-textarea>\r\n          <formify-toggle *ngIf=\"control.fieldType === fieldTypes.toggle\" [formControl]=\"control.formControl\" [fieldModel]=\"control\"></formify-toggle>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"controlTypes.formGroup\">\r\n          <span class=\"label\">{{control.label}}</span>\r\n          <ng-container *ngTemplateOutlet=\"recursiveList;context: {controls:control.controls}\" ></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"controlTypes.formArray\">\r\n          <span class=\"label\">{{control.label}}</span>\r\n          <ng-container *ngTemplateOutlet=\"recursiveList;context: {controls:control.controls}\" ></ng-container>\r\n        </ng-container>\r\n      </span>\r\n  </ng-template>\r\n  <ng-container *ngTemplateOutlet=\"recursiveList; context: {controls:controls}\"></ng-container>\r\n  <formify-submit [submit]=\"submit\"> </formify-submit>\r\n</form>\r\n","import {Component, Input, OnInit, SimpleChanges, OnChanges, ChangeDetectorRef, OnDestroy} from '@angular/core';\r\nimport {GroupModel} from '../../models';\r\nimport {FormGroup} from '@angular/forms';\r\n@Component({\r\n  selector: 'formify-group',\r\n  templateUrl: './group-control.component.html',\r\n  styleUrls: ['./group-control.component.scss']\r\n})\r\nexport class GroupControlComponent implements OnInit, OnChanges, OnDestroy  {\r\n  private _groupModel: GroupModel = new GroupModel({controlName: '' , controls: []});\r\n  @Input('groupModel') set onArrayConfig( groupModel: GroupModel | any) {\r\n    this._groupModel = groupModel;\r\n    if (groupModel) {\r\n      this.formGroup = groupModel.formGroup;\r\n      this.formGroup.statusChanges.subscribe(status => {\r\n        this.groupModel.change.next(this.formGroup.value);\r\n      });\r\n    }\r\n  }\r\n  formGroup: FormGroup;\r\n  get groupModel(): GroupModel{\r\n    return this._groupModel;\r\n  }\r\n  constructor() { }\r\n  ngOnChanges(changes: SimpleChanges): void {}\r\n  ngOnInit(): void {}\r\n  ngOnDestroy(): void {\r\n    if (this.groupModel){\r\n      this.groupModel.change.complete();\r\n    }\r\n  }\r\n}\r\n","\r\n<form [formGroup]=\"formGroup\" #form=\"ngForm\" *ngIf=\"groupModel\">\r\n  {{groupModel.label}}\r\n  <ng-content></ng-content>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import { Component, forwardRef, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport {FieldControlComponent} from '../field-control/field-control.component';\r\nimport { FormBuilder, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n@Component({\r\n  selector: 'formify-input',\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss'],\r\n  providers: [\r\n    {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent) , multi: true}\r\n  ]\r\n})\r\nexport class InputComponent extends FieldControlComponent implements OnInit , OnChanges {\r\n  constructor(protected formBuilder: FormBuilder) { super(formBuilder); }\r\n  ngOnChanges(changes: SimpleChanges): void {super.ngOnChanges(changes); }\r\n  ngOnInit(): void {super.ngOnInit(); }\r\n}\r\n","<form [formGroup]=\"formGroup\" #form=\"ngForm\" [autocomplete]=\"autoComplete\" *ngIf=\"fieldModel && !hidden\">\r\n  <mat-form-field [appearance]=\"appearance\"  class=\"full-width\">\r\n    <mat-label>{{(!useTranslation) ? label : label | translate}}</mat-label>\r\n    <span *ngIf=\"prefix\" matPrefix  (click)=\"handlePrefix($event)\" >\r\n      {{prefix}}\r\n      <mat-icon class=\"dropDownIconInPrefix\" *ngIf=\"dropDownInPrefix\" (click)=\"handlePrefix($event)\">arrow_drop_down</mat-icon>\r\n      &nbsp;&nbsp;\r\n    </span>\r\n    <label>\r\n      <input matInput [formControlName]=\"controlName\" (input)=\"emitValue()\" [errorStateMatcher]=\"errorStateMatcher\" [type]=\"type\" [placeholder]=\"(!useTranslation) ? placeholder : placeholder | translate\">\r\n    </label>\r\n    <mat-icon *ngIf=\"icon\" matSuffix [ngClass]=\"{'error-icon' : control.invalid && submitted | async }\">{{icon}}</mat-icon>\r\n    <mat-hint *ngIf=\"hint\">{{(!useTranslation) ? hint : hint | translate}}</mat-hint>\r\n    <mat-error *ngIf=\"control.invalid && submitted | async\">\r\n      <span *ngFor=\"let error of errors(control)\">\r\n        {{(!useTranslation) ? error.description : error.translationCode | translate: error.parameters}}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n  <button hidden #submit></button>\r\n</form>\r\n\r\n\r\n","import {Component, forwardRef, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport {FormBuilder, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {FieldControlComponent } from '../field-control/field-control.component';\r\n@Component({\r\n  selector: 'formify-radio',\r\n  templateUrl: './radio.component.html',\r\n  styleUrls: ['./radio.component.scss'],\r\n  providers: [{provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioComponent), multi: true}]\r\n})\r\nexport class RadioComponent extends FieldControlComponent implements OnInit , OnChanges{\r\n  constructor(protected formBuilder: FormBuilder) { super(formBuilder); }\r\n  ngOnChanges(changes: SimpleChanges): void {super.ngOnChanges(changes); }\r\n  ngOnInit(): void {super.ngOnInit(); }\r\n}\r\n","<form [formGroup]=\"formGroup\" #form=\"ngForm\" [autocomplete]=\"autoComplete\" *ngIf=\"fieldModel && !hidden\">\r\n  <mat-label class=\"label\">{{(!useTranslation) ? label : label | translate}}:</mat-label>\r\n  <mat-radio-group [formControlName]=\"controlName\" (change)=\"emitValue()\">\r\n    <mat-radio-button [color]=\"color\" *ngFor=\"let option of options\" class=\"radio-button\" [value]=\"option.value\">\r\n      {{option.text}}\r\n    </mat-radio-button>\r\n  </mat-radio-group>\r\n  <mat-error *ngIf=\"control.invalid && submitted | async\">\r\n    <span *ngFor=\"let error of errors(control)\">\r\n      {{(!useTranslation) ? error.description : error.translationCode | translate: error.parameters}}\r\n    </span>\r\n  </mat-error>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import { Component, forwardRef, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport { FormBuilder, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {FieldControlComponent} from '../field-control/field-control.component';\r\n@Component({\r\n  selector: 'formify-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss'],\r\n  providers: [{provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true}]\r\n})\r\nexport class SelectComponent extends FieldControlComponent implements OnInit , OnChanges{\r\n  constructor(protected formBuilder: FormBuilder) { super(formBuilder); }\r\n  ngOnChanges(changes: SimpleChanges): void {super.ngOnChanges(changes); }\r\n  ngOnInit(): void {super.ngOnInit(); }\r\n}\r\n","<form [formGroup]=\"formGroup\" #form=\"ngForm\" [autocomplete]=\"autoComplete\" *ngIf=\"fieldModel && !hidden\">\r\n  <mat-form-field [appearance]=\"appearance\"  class=\"full-width\">\r\n    <mat-label>{{(!useTranslation) ? label : label | translate}}</mat-label>\r\n    <span *ngIf=\"prefix\" matPrefix  (click)=\"handlePrefix($event)\" >\r\n      {{prefix}}\r\n      <mat-icon class=\"dropDownIconInPrefix\" *ngIf=\"dropDownInPrefix\" (click)=\"handlePrefix($event)\">arrow_drop_down</mat-icon>\r\n      &nbsp\r\n    </span>\r\n    <mat-select [formControlName]=\"controlName\" (selectionChange)='emitValue()' multiple=\"{{multiple}}\" [errorStateMatcher]=\"errorStateMatcher\"  >\r\n      <mat-option *ngIf=\"none\">None</mat-option>\r\n      <mat-option *ngFor=\"let option of options\" [value]=\"option.value\">\r\n        {{option.text}}\r\n       </mat-option>\r\n    </mat-select>\r\n    <mat-icon *ngIf=\"icon\" matSuffix [ngClass]=\"{'error-icon' : control.invalid && submitted | async }\">{{icon}}</mat-icon>\r\n    <mat-hint *ngIf=\"hint\">{{(!useTranslation) ? hint : hint | translate}}</mat-hint>\r\n    <mat-error *ngIf=\"control.invalid && submitted | async\">\r\n      <span *ngFor=\"let error of errors(control)\">\r\n        {{(!useTranslation) ? error.description : error.translationCode | translate: error.parameters}}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {SubmitModel} from '../../models';\r\n@Component({\r\n  selector: 'formify-submit',\r\n  templateUrl: './submit.component.html',\r\n  styleUrls: ['./submit.component.scss']\r\n})\r\nexport class SubmitComponent implements OnInit {\r\n  @Input('submit') submit: SubmitModel = new SubmitModel();\r\n  @Input('disabled') disabled: boolean = false;\r\n  @Output('onSubmit') onSubmit: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  constructor() { }\r\n  ngOnInit(): void {}\r\n  onHandleSubmit(): void {\r\n    this.onSubmit.emit(true);\r\n    this.submit.status.next(true);\r\n  }\r\n}\r\n","<div class=\"submit-content\">\r\n  <button (click)=\"onHandleSubmit()\" [disabled]=\"submit.disabled\" mat-raised-button class=\"submit\" color=\"{{submit.color}}\" >\r\n    <span *ngIf=\"!submit.loading; else loading_spinner_login\"> {{submit.text}}</span>\r\n    <ng-template #loading_spinner_login>\r\n      <mat-icon class=\"icon_button_login\">\r\n        <mat-spinner [diameter]=\"30\"  class=\"loading center\"></mat-spinner>\r\n      </mat-icon>\r\n    </ng-template>\r\n  </button>\r\n</div>\r\n\r\n","import {Component, forwardRef, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport {FormBuilder, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {FieldControlComponent} from '../field-control/field-control.component';\r\n@Component({\r\n  selector: 'formify-textarea',\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: ['./textarea.component.scss'],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextareaComponent) , multi: true }]\r\n})\r\nexport class TextareaComponent extends FieldControlComponent implements OnInit , OnChanges {\r\n  constructor(protected formBuilder: FormBuilder) { super(formBuilder); }\r\n  ngOnChanges(changes: SimpleChanges): void {super.ngOnChanges(changes); }\r\n  ngOnInit(): void {super.ngOnInit(); }\r\n}\r\n","<form [formGroup]=\"formGroup\" #form=\"ngForm\" [autocomplete]=\"autoComplete\" *ngIf=\"fieldModel && !hidden\">\r\n  <mat-form-field [appearance]=\"appearance\"  class=\"full-width\">\r\n    <mat-label>{{(!useTranslation) ? label : label | translate}}</mat-label>\r\n    <span *ngIf=\"prefix\" matPrefix  (click)=\"handlePrefix($event)\" >\r\n      {{prefix}}\r\n      <mat-icon class=\"dropDownIconInPrefix\" *ngIf=\"dropDownInPrefix\" (click)=\"handlePrefix($event)\">arrow_drop_down</mat-icon>\r\n      &nbsp\r\n    </span>\r\n    <label>\r\n      <textarea matInput [formControlName]=\"controlName\" (input)=\"emitValue()\" [errorStateMatcher]=\"errorStateMatcher\" [type]=\"type\" [placeholder]=\"(!useTranslation) ? placeholder : placeholder | translate\"></textarea>\r\n    </label>\r\n    <mat-icon *ngIf=\"icon\" matSuffix [ngClass]=\"{'error-icon' : control.invalid && submitted | async }\">{{icon}}</mat-icon>\r\n    <mat-hint *ngIf=\"hint\">{{(!useTranslation) ? hint : hint | translate}}</mat-hint>\r\n    <mat-error *ngIf=\"control.invalid && submitted | async\">\r\n      <span *ngFor=\"let error of errors(control)\">\r\n        {{(!useTranslation) ? error.description : error.translationCode | translate: error.parameters}}\r\n      </span>\r\n    </mat-error>\r\n  </mat-form-field>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import {Component, forwardRef, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport {FormBuilder, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {FieldControlComponent} from '../field-control/field-control.component';\r\n@Component({\r\n  selector: 'formify-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent) , multi: true }]\r\n})\r\nexport class ToggleComponent extends FieldControlComponent implements OnInit , OnChanges {\r\n  constructor(protected formBuilder: FormBuilder) { super(formBuilder); }\r\n  ngOnChanges(changes: SimpleChanges): void {super.ngOnChanges(changes); }\r\n  ngOnInit(): void {super.ngOnInit(); }\r\n}\r\n","<form [formGroup]=\"formGroup\" #form=\"ngForm\" [autocomplete]=\"autoComplete\" *ngIf=\"fieldModel && !hidden\">\r\n  <div class=\"toggle-content\">\r\n    <mat-slide-toggle [formControlName]=\"controlName\" color=\"{{color}}\" (change)=\"emitValue()\">{{(!useTranslation) ? label : label | translate}}</mat-slide-toggle>\r\n    <mat-icon *ngIf=\"icon\" matSuffix [ngClass]=\"{'error-icon' : control.invalid && submitted | async }\">{{icon}}</mat-icon>\r\n  </div>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport {ArrayModel} from '../../../models';\r\nimport {ArrayControlComponent} from '../../../components/array-control/array-control.component';\r\nimport {AddressGroupControl} from '../../../groups/address.group-control';\r\n\r\n@Component({\r\n  selector: 'formify-address',\r\n  templateUrl: './address.component.html',\r\n  styleUrls: ['./address.component.scss']\r\n})\r\nexport class AddressComponent extends ArrayControlComponent implements OnInit {\r\n  constructor() { super(); }\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n  addAddress(): void {\r\n    this.arrayModel.push(new AddressGroupControl());\r\n  }\r\n  delete(): void{\r\n    this.arrayModel.removeAt(this.arrayModel.controls.length - 1 );\r\n  }\r\n}\r\n","\r\n<form [formGroup]=\"formGroup\" #form=\"ngForm\" *ngIf=\"arrayModel\">\r\n  <div>\r\n    <span class=\"label\">{{arrayModel.label}}</span>\r\n    <span style=\"margin-left: 10px\"> Add </span>\r\n    <button mat-icon-button (click)=\"addAddress()\"><mat-icon>add</mat-icon></button>\r\n    <span>or delete</span>\r\n    <button mat-icon-button (click)=\"delete()\"><mat-icon color=\"warn\">delete</mat-icon></button>\r\n    <span>address group</span>\r\n  </div>\r\n  <div [formArrayName]=\"arrayModel.controlName\" *ngFor=\"let item of arrayModel['controls']; let i = index;\">\r\n    <div [formGroupName]=\"i\">\r\n      <div class=\"address-content\">\r\n        <formify-input formControlName=\"street\" [fieldModel]=\"item.field('street')\"></formify-input>\r\n        <formify-input formControlName=\"city\" [fieldModel]=\"item.field('city')\"></formify-input>\r\n        <formify-select formControlName=\"country\" [fieldModel]=\"item.field('country')\"></formify-select>\r\n        <formify-input formControlName=\"zip\" [fieldModel]=\"item.field('zip')\"></formify-input>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <button hidden #submit></button>\r\n</form>\r\n\r\n\r\n\r\n","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\r\nimport {GroupControlComponent} from '../../../components/group-control/group-control.component';\r\n@Component({\r\n  selector: 'formify-contact',\r\n  templateUrl: './contact.component.html',\r\n  styleUrls: ['./contact.component.scss']\r\n})\r\nexport class ContactComponent extends GroupControlComponent implements OnInit {\r\n  constructor() { super(); }\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n}\r\n","\r\n<form [formGroup]=\"formGroup\" #form=\"ngForm\" *ngIf=\"groupModel\">\r\n  <span class=\"label\">{{groupModel.label}}</span>\r\n  <div class=\"contact-content\">\r\n    <formify-input formControlName=\"phone\" [fieldModel]=\"groupModel.field('phone')\"></formify-input>\r\n    <formify-input formControlName=\"email\" [fieldModel]=\"groupModel.field('email')\"></formify-input>\r\n    <formify-input formControlName=\"location\" [fieldModel]=\"groupModel.field('location')\"></formify-input>\r\n  </div>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {GroupControlComponent} from '../../../components/group-control/group-control.component';\r\nimport {FieldModel, FieldTypes} from '../../../models';\r\nimport {AbstractControl} from '@angular/forms';\r\n@Component({\r\n  selector: 'formify-exercises',\r\n  templateUrl: './exercises.component.html',\r\n  styleUrls: ['./exercises.component.scss']\r\n})\r\nexport class ExercisesComponent extends GroupControlComponent implements OnInit {\r\n  public  fieldTypes = FieldTypes;\r\n  constructor() { super(); }\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n  addExercise(): void{\r\n    const AddExerciseField: AbstractControl = this.groupModel.formGroup.get('addExercise');\r\n    if (AddExerciseField.value) {\r\n      if (AddExerciseField.value.length > 0) {\r\n        this.groupModel.addControl(new FieldModel({\r\n          controlName: AddExerciseField.value,\r\n          label: AddExerciseField.value,\r\n          fieldType: FieldTypes.checkbox,\r\n          defaultValue: true\r\n        }));\r\n        AddExerciseField.reset();\r\n      }\r\n    }\r\n  }\r\n  onKeyPressAddExercise(event: KeyboardEvent): void{\r\n    if (event.keyCode === 13){\r\n      this.addExercise();\r\n    }\r\n  }\r\n}\r\n","\r\n<form [formGroup]=\"formGroup\" #form=\"ngForm\" *ngIf=\"groupModel\">\r\n    <span class=\"label\">\r\n      {{groupModel.label}}\r\n    </span>\r\n  <div class=\"exercises-header\">\r\n    <formify-input formControlName=\"addExercise\" [fieldModel]=\"groupModel.field('addExercise')\" (keypress)=\"onKeyPressAddExercise($event)\"></formify-input>\r\n    <span> Press enter to add &nbsp; -or- </span>\r\n    <button mat-icon-button (click)=\"addExercise()\"><mat-icon>add</mat-icon></button>\r\n  </div>\r\n  <div class=\"exercises-content\">\r\n    <div *ngFor=\"let control of groupModel.controls\">\r\n      <formify-checkbox *ngIf=\"control.fieldType === fieldTypes.checkbox\"  [formControlName]=\"control.controlName\" [fieldModel]=\"control\"></formify-checkbox>\r\n    </div>\r\n  </div>\r\n  <button hidden #submit></button>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AddressComponent } from './components/address/address.component';\r\nimport {FormifyModule} from '../formify.module';\r\nimport {MaterialModule} from '../material.module';\r\nimport { ExercisesComponent } from './components/exercises/exercises.component';\r\nimport { ContactComponent } from './components/contact/contact.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AddressComponent, ExercisesComponent, ContactComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormifyModule,\r\n    MaterialModule\r\n  ],\r\n  exports: [\r\n    AddressComponent,\r\n    ExercisesComponent,\r\n    ContactComponent\r\n  ]\r\n})\r\nexport class CustomModule { }\r\n","import {FieldModel, FieldState, FieldTypes} from '../models';\r\nexport class AppearanceFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState  = {}) {\r\n    const  field: FieldModel =  new FieldModel({\r\n      controlName: 'appearance',\r\n      fieldType: FieldTypes.radio,\r\n      label: 'Appearance',\r\n      defaultValue: 'legacy',\r\n      options: [{text: 'Legacy', value: 'legacy'}, {text: 'Standard', value: 'standard'}, {text: 'Fill', value: 'fill'}, {text: 'Outline', value: 'outline'}]\r\n    });\r\n    super(Object.assign(field , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldState, FieldTypes, ValidatorModel} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nexport class BiographyFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState  = {}) {\r\n    const  field: FieldModel = new FieldModel({\r\n      controlName: 'biography',\r\n      fieldType : FieldTypes.textarea,\r\n      label: 'Describe your biography',\r\n      placeholder: 'biography',\r\n      autoComplete: 'off',\r\n      validators: [\r\n        new ValidatorModel({validator: Validators.required, errorCode: 'required', description: 'biography is required'}),\r\n      ]\r\n    });\r\n    super(Object.assign(field , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldState, FieldTypes} from '../models';\r\n\r\nexport class ColorFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState  = {}) {\r\n    const  field: FieldModel =  new FieldModel({\r\n      controlName: 'color',\r\n      fieldType: FieldTypes.radio,\r\n      label: 'Color',\r\n      defaultValue: 'primary',\r\n      options: [{text: 'Primary', value: 'primary'}, {text: 'Accent', value: 'accent'}, {text: 'Warn', value: 'warn'}]\r\n    });\r\n    super(Object.assign(field , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldState, FieldTypes, ValidatorModel} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nexport class CountryFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState = {}) {\r\n    const field: FieldModel = new FieldModel({\r\n      controlName: 'country',\r\n      fieldType: FieldTypes.select,\r\n      label: 'Choose country',\r\n      placeholder: 'country',\r\n      autoComplete: 'off',\r\n      options: [{text: 'Albania', value: 'Al'}, {text: 'England', value: 'En'}, {text: 'Germany', value: 'Gr'}],\r\n      validators: [\r\n        new ValidatorModel({validator: Validators.required, errorCode: 'required', description: 'identity is required'}),\r\n      ]\r\n    });\r\n    super(Object.assign(field, overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldState, ValidatorModel} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nimport {Email} from './regex';\r\nexport class EmailFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState = {}) {\r\n    const field: FieldModel = new FieldModel({\r\n      controlName: 'email',\r\n      label: 'Email address',\r\n      placeholder: 'email',\r\n      icon: 'email',\r\n      autoComplete: 'off',\r\n      validators: [\r\n        {validator: Validators.required, errorCode: 'required', description: 'identity is required'},\r\n        {validator: Validators.pattern(Email) , errorCode: 'pattern' , description: 'Email address is incorrect'},\r\n        {validator: null, errorCode: 'exist' , description: 'This email exist in server'},\r\n      ]\r\n    });\r\n    super(Object.assign(field, overwrite));\r\n  }\r\n}\r\n","export * from './regex';\r\nexport * from './appearance.field-control';\r\nexport * from './biography.field-control';\r\nexport * from './color.field-control';\r\nexport * from './country.field-control';\r\nexport * from './email.field-control';\r\nexport * from './language.field-control';\r\nexport * from './name.field-control';\r\nexport * from './password.field-control';\r\nexport * from './phone.field-control';\r\nexport * from './toggle.field-control';\r\n","import {FieldModel, FieldState, FieldTypes, ValidatorModel} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nexport class LanguageFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState  = {}) {\r\n    const  field: FieldModel = new FieldModel({\r\n      controlName: 'languages',\r\n      fieldType : FieldTypes.select,\r\n      label: 'Choose languages',\r\n      placeholder: 'language',\r\n      autoComplete: 'off',\r\n      defaultValue: ['en'],\r\n      multiple: true,\r\n      options: [{text: 'Shqip', value: 'al'}, {text: 'English', value: 'en'}, {text: 'Italiano', value: 'it'}, {text: 'Espanol', value: 'es'} , {text: 'Francais', value: 'fr'}],\r\n      validators: [\r\n        new ValidatorModel({validator: Validators.required, errorCode: 'required', description: 'language is required'}),\r\n      ]\r\n    });\r\n    super(Object.assign(field , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldState, ValidatorModel} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nexport class NameFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState  = {}) {\r\n    const  field: FieldModel =  new FieldModel({\r\n      controlName: 'firstName',\r\n      label: 'Enter first name',\r\n      placeholder: 'first name',\r\n      autoComplete: 'off',\r\n      validators: [\r\n        new ValidatorModel({validator: Validators.required, errorCode: 'required', description: 'Name is required'}),\r\n        new ValidatorModel( {validator: Validators.minLength(3), errorCode: 'minlength', description: 'Minimum 3 characters required', parameters: {value: 3}}),\r\n      ]\r\n    });\r\n    super(Object.assign(field , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldState} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nexport class PasswordFieldControl extends FieldModel{\r\n  constructor(overwrite: FieldState  = {}) {\r\n    const field: FieldModel = new FieldModel({\r\n      controlName: 'password',\r\n      icon: 'vpn_key',\r\n      type: 'password',\r\n      label: 'Enter password',\r\n      placeholder: 'password',\r\n      validators: [\r\n        {validator: Validators.required, errorCode: 'required', description: 'Password is required'},\r\n        {validator: Validators.minLength(8), errorCode: 'minlength', description: 'Minimum 8 characters are required', parameters: {value: 8}},\r\n        {validator: null, errorCode: 'invalid' , description: 'Password is invalid'},\r\n      ]\r\n    });\r\n    super(Object.assign(field , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldState, ValidatorModel} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nimport {Phone} from './regex';\r\nexport class PhoneFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState = {}) {\r\n    const field: FieldModel = new FieldModel({\r\n      controlName: 'phone',\r\n      prefix: '+355', type: 'tel',\r\n      label: 'Number phone',\r\n      placeholder: 'phone',\r\n      icon: 'phone',\r\n      autoComplete: 'off',\r\n      validators: [\r\n        {validator: Validators.required, errorCode: 'required', description: 'identity is required'},\r\n        {validator: Validators.pattern(Phone) , errorCode: 'pattern' , description: 'Phone number is incorrect'},\r\n        {validator: null, errorCode: 'exist' , description: 'This phone exist in server'},\r\n      ]\r\n    });\r\n    super(Object.assign(field, overwrite));\r\n  }\r\n}\r\n\r\n","export const Email = '[A-Za-z0-9._%+-]{3,}@[a-zA-Z]{3,}([.]{1}[a-zA-Z]{2,}|[.]{1}[a-zA-Z]{2,}[.]{1}[a-zA-Z]{2,})';\r\nexport const  Phone = '^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\\\s\\\\./0-9]*$';\r\n","import {FieldModel, FieldState, FieldTypes} from '../models';\r\n\r\nexport class ToggleFieldControl extends FieldModel {\r\n  constructor(overwrite: FieldState  = {}) {\r\n    const  field: FieldModel = new FieldModel({\r\n      controlName: 'toggle',\r\n      label: 'Toggle',\r\n      defaultValue: true,\r\n      fieldType: FieldTypes.toggle,\r\n    });\r\n    super(Object.assign(field , overwrite));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {CommonModule } from '@angular/common';\r\nimport {InputComponent } from './components/input/input.component';\r\nimport {FieldControlComponent} from './components/field-control/field-control.component';\r\nimport {SelectComponent } from './components/select/select.component';\r\nimport {TextareaComponent } from './components/textarea/textarea.component';\r\nimport {FormifyComponent } from './components/formify/formify.component';\r\nimport {SubmitComponent} from './components/submit/submit.component';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport {HttpClientModule } from '@angular/common/http';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {MaterialModule} from './material.module';\r\nimport {ToggleComponent} from './components/toggle/toggle.component';\r\nimport {RadioComponent } from './components/radio/radio.component';\r\nimport {ArrayControlComponent } from './components/array-control/array-control.component';\r\nimport {GroupControlComponent } from './components/group-control/group-control.component';\r\nimport {CheckboxComponent } from './components/checkbox/checkbox.component';\r\nexport function createTranslateLoader(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http, 'assets/i18n/', '.json');\r\n}\r\n@NgModule({\r\n  declarations: [\r\n    FieldControlComponent,\r\n    ArrayControlComponent,\r\n    GroupControlComponent,\r\n    SubmitComponent,\r\n    InputComponent,\r\n    SelectComponent,\r\n    TextareaComponent,\r\n    SubmitComponent,\r\n    FormifyComponent,\r\n    ToggleComponent,\r\n    RadioComponent,\r\n    CheckboxComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      },\r\n    }),\r\n  ],\r\n  exports: [\r\n    ReactiveFormsModule,\r\n    FieldControlComponent,\r\n    ArrayControlComponent,\r\n    GroupControlComponent,\r\n    SubmitComponent,\r\n    InputComponent,\r\n    SelectComponent,\r\n    TextareaComponent,\r\n    ToggleComponent,\r\n    RadioComponent,\r\n    CheckboxComponent,\r\n    FormifyComponent,\r\n  ],\r\n})\r\nexport class FormifyModule { }\r\n","import {FieldModel, FieldState, FieldTypes, GroupModel, GroupState, ValidatorModel} from '../models';\r\nimport {Validators} from '@angular/forms';\r\nimport {CountryFieldControl} from '../fields/country.field-control';\r\nexport class AddressGroupControl extends GroupModel {\r\n  constructor(overwrite: GroupState  = {}) {\r\n    const  group: GroupModel = new GroupModel({\r\n      controlName: 'address',\r\n      label: 'address:',\r\n      controls: [\r\n        new FieldModel({\r\n          controlName: 'street', label: 'Enter your street', placeholder: 'street', icon: 'add_road' , autoComplete: 'off',\r\n          validators: [\r\n            new ValidatorModel({validator: Validators.required, errorCode: 'required', description: 'identity is required'}),\r\n          ]\r\n        }),\r\n        new FieldModel({\r\n          controlName: 'city', label: 'Enter city', placeholder: 'city', icon: 'location_city' , autoComplete: 'off',\r\n          validators: [\r\n            {validator: Validators.required, errorCode: 'required', description: 'identity is required'},\r\n          ]\r\n        }),\r\n        new CountryFieldControl(),\r\n        new FieldModel({\r\n          controlName: 'zip', label: 'Enter zip code', type: 'number' , placeholder: 'zip code', icon: 'pin' , autoComplete: 'off',\r\n          validators: [\r\n            {validator: Validators.required, errorCode: 'required', description: 'identity is required'},\r\n          ]\r\n        }),\r\n      ]\r\n    });\r\n    super(Object.assign(group , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, GroupModel, GroupState} from '../models';\r\nimport {EmailFieldControl} from '../fields/email.field-control';\r\nimport {PhoneFieldControl} from '../fields/phone.field-control';\r\nexport class ContactGroupControl extends GroupModel {\r\n  constructor(overwrite: GroupState  = {}) {\r\n    const  group: GroupModel = new GroupModel({\r\n      controlName: 'contact',\r\n      label: 'Contact:',\r\n      controls: [\r\n        new PhoneFieldControl(),\r\n        new EmailFieldControl(),\r\n        new FieldModel({\r\n          controlName: 'location', label: 'Enter your location', placeholder: 'location', icon: 'location_on', autoComplete: 'off',\r\n        })\r\n      ]\r\n    });\r\n    super(Object.assign(group , overwrite));\r\n  }\r\n}\r\n","import {FieldModel, FieldTypes, GroupModel, GroupState} from '../models';\r\nexport class ExercisesGroupControl extends GroupModel {\r\n  constructor(overwrite: GroupState  = {}) {\r\n    const  group: GroupModel = new GroupModel({\r\n      controlName: 'exercises',\r\n      label: 'Exercises:',\r\n      controls: [\r\n        new FieldModel({controlName: 'addExercise', label: 'Write your custom exercise', icon: 'directions_run' , placeholder: 'exercise'}),\r\n        new FieldModel({controlName: 'running', label: 'Running', fieldType: FieldTypes.checkbox,  defaultValue: true}),\r\n        new FieldModel({controlName: 'skipping', label: 'Skipping', fieldType: FieldTypes.checkbox, defaultValue: false}),\r\n        new FieldModel({controlName: 'cycling', label: 'Cycling', fieldType: FieldTypes.checkbox,  defaultValue: false}),\r\n        new FieldModel({controlName: 'burpee', label: 'Burpee', fieldType: FieldTypes.checkbox,  defaultValue: false}),\r\n        new FieldModel({controlName: 'pool', label: 'Pool', fieldType: FieldTypes.checkbox,  defaultValue: false}),\r\n        new FieldModel({controlName: 'surfing', label: 'Surfing', fieldType: FieldTypes.checkbox,  defaultValue: true}),\r\n        new FieldModel({controlName: 'sledding', label: 'Sledding', fieldType: FieldTypes.checkbox,  defaultValue: false}),\r\n        new FieldModel({controlName: 'skateboarding', label: 'Skateboarding', fieldType: FieldTypes.checkbox,  defaultValue: true}),\r\n      ]\r\n    });\r\n    super(Object.assign(group , overwrite));\r\n  }\r\n}\r\n","export * from './address.group-control';\r\nexport * from './contact.group-control';\r\nexport * from './exercises.group-control';\r\n","import {NgModule } from '@angular/core';\r\nimport {CommonModule } from '@angular/common';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    MatProgressSpinnerModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    MatRadioModule,\r\n    MatCheckboxModule,\r\n    MatTabsModule\r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n","import {FieldModel} from './field.model';\r\nimport {GroupModel} from './group.model';\r\nimport {ArrayModel} from './array.model';\r\nexport abstract class FormifyAccessibility {\r\n  public get(path: string): (FieldModel | GroupModel | ArrayModel) | null{ return  null; }\r\n  public field(path: string): FieldModel | null { return null; }\r\n  public group(path: string): GroupModel | null { return null; }\r\n  public array(path: string): ArrayModel | null{ return null; }\r\n}\r\n","import {FormArray} from '@angular/forms';\r\nimport {ControlsType, ControlTypes} from './formify.model';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {FormifyAccessibility} from './accessibility.abstract';\r\nimport {FieldModel} from './field.model';\r\nimport {GroupModel} from './group.model';\r\nimport {FormifyGenerate} from './formify.generate';\r\nimport {SubmitModel} from './submit.model';\r\nexport interface ArrayState {\r\n  controlName: string;\r\n  controls: ControlsType[];\r\n  label?: string;\r\n}\r\nexport class ArrayModel extends FormifyGenerate implements FormifyAccessibility{\r\n  formArray: FormArray;\r\n  controlName: string;\r\n  controls: ControlsType[];\r\n  readonly controlType: ControlTypes;\r\n  change: BehaviorSubject<any>;\r\n  label: string;\r\n  public submit: SubmitModel;\r\n  constructor( config: ArrayState ) {\r\n    super();\r\n    this.formArray = null;\r\n    this.controlName = '';\r\n    this.controlType = ControlTypes.formArray;\r\n    this.controls = [];\r\n    this.change = new BehaviorSubject<any>(null);\r\n    this.label = '';\r\n    Object.assign(this, config);\r\n  }\r\n  get(path: string): ControlsType {\r\n    for (const control of this.controls){\r\n      if (path === control.controlName){\r\n        return control;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  field(path: string): FieldModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof FieldModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  group(path: string): GroupModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof GroupModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  array(path: string): ArrayModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof ArrayModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  removeAt(index: number): void{\r\n    this.controls.splice(index, 1);\r\n    this.formArray.removeAt(index);\r\n  }\r\n  insertAt(index: number , control: ControlsType ): void {\r\n    if (control instanceof FieldModel){\r\n      this.controls.splice(index, 0, control);\r\n      this.formArray.insert( index, this.generateFormControl(control));\r\n    } else if ( control instanceof  GroupModel){\r\n      this.controls.splice(index, 0 , control);\r\n      this.formArray.insert( index, this.generateFormGroup(control));\r\n    } else if (control instanceof ArrayModel){\r\n      this.controls.splice(index, 0 , control);\r\n      this.formArray.insert( index, this.generateFormArray(control));\r\n    }\r\n  }\r\n  push(control: ControlsType ): void{\r\n    if (control instanceof FieldModel){\r\n      this.formArray.push(this.generateFormControl(control));\r\n      this.controls.push(control);\r\n    } else if ( control instanceof  GroupModel){\r\n      this.formArray.push(this.generateFormGroup(control));\r\n      this.controls.push(control);\r\n    } else if (control instanceof ArrayModel){\r\n      this.formArray.push(this.generateFormArray(control));\r\n      this.controls.push(control);\r\n    }\r\n  }\r\n  unshift(control: ControlsType ): void{\r\n    if (control instanceof FieldModel){\r\n      this.formArray.insert(0, this.generateFormControl(control));\r\n      this.controls.unshift(control);\r\n    } else if ( control instanceof  GroupModel){\r\n      this.formArray.insert( 0, this.generateFormGroup(control));\r\n      this.controls.unshift(control);\r\n    } else if (control instanceof ArrayModel){\r\n      this.formArray.insert(0, this.generateFormArray(control));\r\n      this.controls.unshift(control);\r\n    }\r\n  }\r\n  public reset(): void{\r\n    this.formGroup.reset();\r\n  }\r\n}\r\n","import {AbstractControl, FormControl, FormGroup, FormGroupDirective, NgForm, ValidationErrors, ValidatorFn} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!( control && control.invalid && isSubmitted );\r\n  }\r\n}\r\n\r\nexport const MatchConfirmPassword: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n  const password = control.get('password');\r\n  const confirmPassword = control.get('confirmPassword');\r\n  if (password.value !== confirmPassword.value && confirmPassword.value) {\r\n    console.log('not match');\r\n    confirmPassword.setErrors({notMatch: true});\r\n  } else {\r\n    if (confirmPassword.hasError('notMatch')) {\r\n      delete confirmPassword.errors['notMatch'];\r\n      confirmPassword.updateValueAndValidity();\r\n      console.log('match');\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport class MyErrorStatePasswordMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    const data = control.parent.value;\r\n    return !!( control  && data.password !== data.confirmPassword && isSubmitted  );\r\n  }\r\n}\r\n","import {FormControl} from '@angular/forms';\r\nimport {ControlTypes} from './formify.model';\r\nimport {MyErrorStateMatcher} from './error-mathers.config';\r\nimport {ValidatorState} from './validator.model';\r\nimport {ErrorStateMatcher, ThemePalette} from '@angular/material/core';\r\nimport {OptionModel} from './option.model';\r\nimport {MatFormFieldAppearance} from '@angular/material/form-field';\r\nimport {SubmitModel} from './submit.model';\r\nimport {FormifyAccessibility} from './accessibility.abstract';\r\nimport {GroupModel} from './group.model';\r\nimport {ArrayModel} from './array.model';\r\nexport enum FieldTypes {\r\n  input = '[INPUT] input field',\r\n  textarea = '[textarea] textarea field',\r\n  select = '[SELECT] select field',\r\n  radio = '[RADIO] radio field',\r\n  checkbox = '[CHECKBOX] checkbox field',\r\n  toggle = '[TOGGLE] toggle field',\r\n  inputPhone = '[RADIO] input phone field',\r\n}\r\nexport interface FieldState{\r\n  formControl?: FormControl;\r\n  controlName?: string;\r\n  fieldType?: FieldTypes;\r\n  defaultValue?: string | boolean | any[];\r\n  errorStateMatcher?: ErrorStateMatcher;\r\n  validators?: ValidatorState[];\r\n  options?: OptionModel[];\r\n  appearance?: string;\r\n  useTranslation?: boolean;\r\n  prefix?: string;\r\n  dropDownInPrefix?: boolean;\r\n  type?: string;\r\n  label?: string;\r\n  placeholder?: string;\r\n  hint?: string;\r\n  autoComplete?: 'off' | 'on';\r\n  icon?: string;\r\n  color?: ThemePalette;\r\n  multiple?: boolean;\r\n  readOnly?: boolean;\r\n  none?: boolean;\r\n  hidden?: boolean;\r\n  disabled?: boolean;\r\n  submit?: SubmitModel;\r\n}\r\nexport class FieldModel extends FormifyAccessibility{\r\n  formControl: FormControl;\r\n  public controlName: string;\r\n  readonly controlType: ControlTypes;\r\n  fieldType: FieldTypes;\r\n  defaultValue: string | boolean;\r\n  errorStateMatcher: ErrorStateMatcher;\r\n  validators: ValidatorState[];\r\n  options: OptionModel[];\r\n  appearance: MatFormFieldAppearance;\r\n  useTranslation: boolean;\r\n  prefix: string;\r\n  dropDownInPrefix: boolean;\r\n  type: string;\r\n  label: string;\r\n  placeholder: string;\r\n  hint: string;\r\n  autoComplete: 'off' | 'on' ;\r\n  icon: string;\r\n  color: ThemePalette;\r\n  multiple: boolean;\r\n  readOnly: boolean;\r\n  none: boolean;\r\n  hidden: boolean;\r\n  disabled: boolean;\r\n  submit: SubmitModel;\r\n\r\n  constructor( config: FieldState ) {\r\n    super();\r\n    this.formControl = null;\r\n    this.controlName = null;\r\n    this.controlType = ControlTypes.formField;\r\n    this.fieldType = FieldTypes.input;\r\n    this.defaultValue = null;\r\n    this.errorStateMatcher = new MyErrorStateMatcher();\r\n    this.validators = [];\r\n    this.options = null;\r\n    this.appearance = 'legacy';\r\n    this.useTranslation = false;\r\n    this.prefix = null;\r\n    this.dropDownInPrefix = false;\r\n    this.type = null;\r\n    this.label = null;\r\n    this.placeholder = null;\r\n    this.hint = null;\r\n    this.autoComplete = 'on';\r\n    this.icon = null;\r\n    this.color = 'primary';\r\n    this.multiple = false;\r\n    this.readOnly = false;\r\n    this.none = false;\r\n    this.hidden = false;\r\n    this.disabled = false;\r\n    this.submit = new SubmitModel();\r\n    Object.assign(this, config);\r\n  }\r\n  update(overwrite: FieldState): void {\r\n    Object.assign(this, overwrite);\r\n  }\r\n  field(path: string): FieldModel | null {\r\n   return null;\r\n  }\r\n  group(path: string): GroupModel | null {\r\n    return null;\r\n  }\r\n  array(path: string): ArrayModel | null {\r\n    return null;\r\n  }\r\n  get(path: string): FieldModel | GroupModel | ArrayModel | null {\r\n    return null;\r\n  }\r\n}\r\n","import {FormifyModel, FormifyState} from './formify.model';\r\nimport {FieldModel, FieldState} from './field.model';\r\nimport {GroupModel} from './group.model';\r\nimport {ArrayModel} from './array.model';\r\nexport class FormifyBuilderModel {\r\n  public form( config: FormifyState ) {\r\n    return new FormifyModel( config );\r\n  }\r\n  public field( config: FieldState ) {\r\n    return new FieldModel( config );\r\n  }\r\n  public group( config: GroupModel ) {\r\n    return new GroupModel( config );\r\n  }\r\n  public array( config: ArrayModel ) {\r\n    this.field({controlName :  'f'});\r\n    return new ArrayModel( config );\r\n  }\r\n}\r\n","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\r\nimport {FieldModel} from './field.model';\r\nimport {GroupModel} from './group.model';\r\nimport {ArrayModel} from './array.model';\r\nimport {ControlsType} from './formify.model';\r\nimport {SubmitModel} from './submit.model';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nexport class FormifyGenerate {\r\n  public formGroup: FormGroup;\r\n  public submit: SubmitModel;\r\n  public $unSubscribe: Subject<boolean> = new Subject<boolean>();\r\n  constructor() {\r\n    this.formGroup = null;\r\n  }\r\n  protected generateFormControls(controls: ControlsType[]): { [controlId: string]: AbstractControl; } {\r\n    const formControls: { [controlId: string]: AbstractControl; } = {};\r\n    for (const control of controls) {\r\n      if (control instanceof FieldModel) {\r\n        Object.assign(formControls , { [control.controlName]: this.generateFormControl(control) });\r\n      } else if (control instanceof GroupModel) {\r\n        Object.assign(formControls , { [control.controlName]: this.generateFormGroup(control) });\r\n      } else if (control instanceof ArrayModel) {\r\n        Object.assign(formControls , { [control.controlName]: this.generateFormArray(control) });\r\n      }\r\n    }\r\n    return formControls;\r\n  }\r\n  protected generateFormControl(control: FieldModel ): FormControl {\r\n    const formControl = new FormControl(\r\n      control.defaultValue , control.validators.map(validator => validator.validator )\r\n        .filter(validator => validator)\r\n    );\r\n    control.formControl = formControl;\r\n    control.submit = this.submit;\r\n    return formControl;\r\n  }\r\n  protected generateFormGroup(control: GroupModel ): FormGroup {\r\n    const formGroup = new FormGroup( this.generateFormControls(control.controls) ); // recursion\r\n    control.formGroup = formGroup;\r\n    control.submit = this.submit;\r\n    control.change.pipe(takeUntil(this.$unSubscribe)).subscribe(change => {\r\n      if (change) {this.formGroup.patchValue(change); }\r\n    });\r\n    return formGroup;\r\n  }\r\n  protected generateFormArray(control: ArrayModel): FormArray {\r\n    const formArray = new FormArray( Object.entries( this.generateFormControls(control.controls)) // recursion\r\n      .map( ([name, value]) => ({name, value}))\r\n      .map( item => item.value)\r\n    );\r\n    control.formArray = formArray;\r\n    control.submit = this.submit;\r\n    control.change.pipe(takeUntil(this.$unSubscribe)).subscribe(change => {\r\n      if (change){this.formGroup.patchValue(change); }\r\n    });\r\n    return formArray;\r\n  }\r\n}\r\n","import {AbstractControl, AbstractControlOptions, FormArray, FormControl, FormGroup, ValidatorFn} from '@angular/forms';\r\nimport {FieldModel, FieldState} from './field.model';\r\nimport {GroupModel} from './group.model';\r\nimport {ArrayModel} from './array.model';\r\nimport {SubmitModel} from './submit.model';\r\nimport {FormifyAccessibility} from './accessibility.abstract';\r\nimport {FormifyGenerate} from './formify.generate';\r\nimport {ThemePalette} from '@angular/material/core';\r\nexport interface FormifyState {\r\n  controls: ControlsType[];\r\n  submit?: SubmitModel;\r\n  options?: OptionsType;\r\n}\r\nexport enum ControlTypes {\r\n  formField = '[FORMFIELD] formField direction',\r\n  formGroup = '[FORMGROUP] formGroup direction',\r\n  formArray = '[FORMARRAY] formArray direction',\r\n}\r\nexport type ControlsType = (FieldModel | GroupModel | ArrayModel | any);\r\nexport type  OptionsType = ValidatorFn | ValidatorFn[] | AbstractControlOptions;\r\nexport  class FormifyModel extends FormifyGenerate implements FormifyAccessibility{\r\n  public controls: ControlsType[];\r\n  public options?: OptionsType;\r\n  public color: ThemePalette;\r\n  constructor( config: FormifyState ) {\r\n    super();\r\n    this.submit = new SubmitModel();\r\n    this.controls = config.controls;\r\n    if (config.hasOwnProperty('submit')){ this.submit = {...this.submit, ...config.submit}; }\r\n    if (config.hasOwnProperty('options')) { this.options = config.options; }\r\n    this.formGroup = new FormGroup( this.generateFormControls(this.controls) , this.options );\r\n    this.formGroup.statusChanges.subscribe(status => {\r\n      this.checkDisabledSubmit();\r\n    });\r\n  }\r\n  get(path: string): FieldModel | GroupModel | ArrayModel | null {\r\n    for (const control of this.controls){\r\n      if (path === control.controlName){\r\n        return control;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  field(path: string): FieldModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof FieldModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  group(path: string): GroupModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof GroupModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  array(path: string): ArrayModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof ArrayModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  addControl(control: ControlsType): void{\r\n    if (control instanceof FieldModel){\r\n      this.controls.push(control);\r\n      this.formGroup.addControl(control.controlName, this.generateFormControl(control));\r\n    } else if ( control instanceof  GroupModel){\r\n      this.controls.push(control);\r\n      this.formGroup.addControl(control.controlName, this.generateFormGroup(control));\r\n    } else if (control instanceof ArrayModel){\r\n      this.controls.push(control);\r\n      this.formGroup.addControl(control.controlName, this.generateFormArray(control));\r\n    }\r\n  }\r\n  removeControl(name: string): void {\r\n    this.controls = this.controls.filter(control => control.controlName !== name);\r\n    this.formGroup.removeControl(name);\r\n  }\r\n  public checkDisabledSubmit(): void {\r\n    this.submit.disabled = ( this.formGroup.invalid && this.submit.status.value || this.submit.loading );\r\n  }\r\n  public loading(loading: boolean): void{\r\n    this.submit.loading = loading;\r\n    this.checkDisabledSubmit();\r\n  }\r\n  public reset(): void{\r\n    this.formGroup.reset();\r\n  }\r\n  public unSubscribe(): void {\r\n    this.$unSubscribe.next();\r\n    this.$unSubscribe.complete();\r\n  }\r\n  updateSubmit(overwrite: SubmitModel): void{\r\n    Object.assign(this.submit , overwrite);\r\n  }\r\n  updateFields(overwrite: FieldState): void{ this.overwriteFields(overwrite, this.controls); }\r\n  private overwriteFields(overwrite: FieldState, controls: ControlsType[]): void{\r\n    controls.forEach(control => {\r\n      if (control instanceof FieldModel){\r\n         Object.assign(control , overwrite);\r\n      }else{\r\n        this.overwriteFields(overwrite , control.controls); // recursion\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {ControlsType, ControlTypes} from './formify.model';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {FieldModel} from './field.model';\r\nimport {FormifyAccessibility} from './accessibility.abstract';\r\nimport {ArrayModel, ArrayState} from './array.model';\r\nimport {FormifyGenerate} from './formify.generate';\r\nimport {SubmitModel} from './submit.model';\r\nexport interface GroupState {\r\n  controlName?: string;\r\n  controls?: ControlsType[];\r\n  label?: string;\r\n}\r\nexport class GroupModel extends FormifyGenerate implements FormifyAccessibility{\r\n  controlName: string;\r\n  controls: ControlsType[];\r\n  readonly controlType: ControlTypes;\r\n  change: BehaviorSubject<any>;\r\n  label: string;\r\n  public submit: SubmitModel;\r\n  constructor( config: GroupState ) {\r\n    super();\r\n    this.controlName = '';\r\n    this.controlType = ControlTypes.formGroup;\r\n    this.controls = [];\r\n    this.change = new BehaviorSubject<any>(null);\r\n    this.label = '';\r\n    Object.assign(this, config);\r\n  }\r\n  get(path: string): ControlsType {\r\n    for (const control of this.controls){\r\n      if (path === control.controlName){\r\n        return control;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  field(path: string): FieldModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof FieldModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  group(path: string): GroupModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof GroupModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  array(path: string): ArrayModel | null {\r\n    const control = this.get(path);\r\n    if (control instanceof ArrayModel) {\r\n      return control;\r\n    }\r\n    return null;\r\n  }\r\n  addControl(control: ControlsType): void{\r\n    if (control instanceof FieldModel){\r\n      this.controls.push(control);\r\n      this.formGroup.addControl(control.controlName, this.generateFormControl(control));\r\n    } else if ( control instanceof  GroupModel){\r\n      this.controls.push(control);\r\n      this.formGroup.addControl(control.controlName, this.generateFormGroup(control));\r\n    } else if (control instanceof ArrayModel){\r\n      this.controls.push(control);\r\n      this.formGroup.addControl(control.controlName, this.generateFormArray(control));\r\n    }\r\n  }\r\n  removeControl(name: string): void {\r\n    this.controls = this.controls.filter(control => control.controlName !== name);\r\n    this.formGroup.removeControl(name);\r\n  }\r\n  public reset(): void{\r\n    this.formGroup.reset();\r\n  }\r\n}\r\n","export * from './formify.model';\r\nexport * from './formify-builder.model';\r\nexport * from './field.model';\r\nexport * from './array.model';\r\nexport * from './group.model';\r\nexport * from './option.model';\r\nexport * from './submit.model';\r\nexport * from './validator.model';\r\nexport * from './accessibility.abstract';\r\n","export class OptionModel {\r\n  text: string;\r\n  value: string | number;\r\n  constructor() {\r\n    this.text = null;\r\n    this.value = null;\r\n  }\r\n}\r\n","import {BehaviorSubject} from 'rxjs';\r\nimport {ThemePalette} from '@angular/material/core';\r\nexport class SubmitModel {\r\n  text?: any;\r\n  color?: ThemePalette;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  status?: BehaviorSubject<boolean>;\r\n  constructor() {\r\n    this.text = 'Submit';\r\n    this.color = 'primary';\r\n    this.loading = false;\r\n    this.disabled = false;\r\n    this.status = new BehaviorSubject<boolean>(false);\r\n  }\r\n}\r\n","import {ValidatorFn} from '@angular/forms';\r\nexport interface ValidatorState {\r\n  validator?: ValidatorFn;\r\n  errorCode?: string;\r\n  description?: string;\r\n  translationCode?: string;\r\n  parameters?: any;\r\n}\r\nexport class ValidatorModel {\r\n  validator: ValidatorFn;\r\n  errorCode: string;\r\n  description: string;\r\n  translationCode: string;\r\n  parameters: any;\r\n  constructor( config?: ValidatorState) {\r\n    this.validator = null;\r\n    this.errorCode = null;\r\n    this.description = null;\r\n    this.translationCode = null;\r\n    this.parameters = null;\r\n    Object.assign(this, config);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":[],"sourceRoot":"webpack:///"}